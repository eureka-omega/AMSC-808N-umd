{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import networkx as nx"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## part 1 import data\n",
    "edges = pd.read_csv('lastfm_asia_edges.csv')\n",
    "# create graph\n",
    "G = nx.Graph()\n",
    "nodes = range(max(edges))\n",
    "G.add_node_from(nodes)\n",
    "G.add_edge_from(edges)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Depth-first search\n",
    "def DFS(G):\n",
    "    N = 10000\n",
    "    visited = np.zeros(N)\n",
    "    parent = -np.ones(N)\n",
    "    discover = np.zeros(N)\n",
    "    finish = np.zeros(N)\n",
    "    \n",
    "    component = -np.ones(N)\n",
    "    cur_component = 1\n",
    "        \n",
    "    tm = 0\n",
    "    \n",
    "    for u in range(N):\n",
    "        if visited[u] == 0:\n",
    "            component[u] = cur_component\n",
    "            tm,discover,visited,component,parent,finish = DFS_visit(G,u,tm,discover,visited,component,parent,finish)\n",
    "            cur_component += 1\n",
    "    \n",
    "    return visited, component, parent, discover, finish  \n",
    "\n",
    "            \n",
    "def DFS_visit(G,u,tm,discover,visited,component,parent,finish):\n",
    "    tm += 1\n",
    "    discover[u] = tm\n",
    "    visited[u] = 0.5\n",
    "    for v in G.neighbors(u):\n",
    "        if visited[v] == 0:\n",
    "            component[v] = component[u]\n",
    "            parent[v] = u\n",
    "            tm,discover,visited,component,parent,finish = DFS_visit(G,v,tm,discover,visited,component,parent,finish)\n",
    "    visited[u] = 1\n",
    "    tm += 1\n",
    "    finish[u] = tm\n",
    "    return tm,discover,visited,component,parent,finish"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## part 2\n",
    "# find components\n",
    "components = DFS(G2)[1]\n",
    "component_sizes = np.unique(components, return_counts=True)[1]\n",
    "print('number of components:', len(component_sizes))\n",
    "print(component_sizes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## part 3\n",
    "degs = G.degree(nodes)\n",
    "k, p = np.unique(degs, return_counts=True)\n",
    "\n",
    "# plot: log-log\n",
    "plt.loglog(k,p/sum(p))\n",
    "\n",
    "# plot: "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
